// <auto-generated />
using System;
using EasyTeams.Data.Models.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyTeams.Data.Migrations
{
    [DbContext(typeof(EasyTeamsContext))]
    [Migration("20240406214312_PTaskDate")]
    partial class PTaskDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Authorised")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ManagerStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<bool>("Sick")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ManagerStaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.PTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerStaffId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("ManagerStaffId");

                    b.ToTable("Staffs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Staff");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Manager", b =>
                {
                    b.HasBaseType("EasyTeams.Data.Models.Domain.Staff");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Leave", b =>
                {
                    b.HasOne("EasyTeams.Data.Models.Domain.Manager", null)
                        .WithMany("AuthorisedLeaves")
                        .HasForeignKey("ManagerStaffId");

                    b.HasOne("EasyTeams.Data.Models.Domain.Staff", null)
                        .WithMany("Leaves")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.PTask", b =>
                {
                    b.HasOne("EasyTeams.Data.Models.Domain.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("EasyTeams.Data.Models.Domain.Staff", null)
                        .WithMany("Tasks")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Project", b =>
                {
                    b.HasOne("EasyTeams.Data.Models.Domain.Manager", null)
                        .WithMany("Projects")
                        .HasForeignKey("ManagerStaffId");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Staff", b =>
                {
                    b.HasOne("EasyTeams.Data.Models.Domain.Manager", null)
                        .WithMany("Staffs")
                        .HasForeignKey("ManagerStaffId");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Staff", b =>
                {
                    b.Navigation("Leaves");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EasyTeams.Data.Models.Domain.Manager", b =>
                {
                    b.Navigation("AuthorisedLeaves");

                    b.Navigation("Projects");

                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
